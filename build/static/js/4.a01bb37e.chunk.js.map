{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","Pages/QuoteDetails.jsx"],"names":["_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","module","exports","NewCommentForm","props","useHttp","addComment","sendRequest","data","status","error","commentTextRef","useRef","p","useParams","onAddComment","useEffect","submitFormHandler","event","preventDefault","quoteId","commentData","current","value","className","classes","form","onSubmit","control","htmlFor","id","rows","ref","actions","CommentItem","item","text","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","getAllComments","onAddComments","useCallback","LoadingSpinner","length","onClick","HighlightedQuote","quote","author","QuoteDetails","params","match","useRouteMatch","getSingleQuote","undefined","path","exact","to","url"],"mappings":"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","file":"static/js/4.a01bb37e.chunk.js","sourcesContent":["import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__1ZVf0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__197iS\",\"loading\":\"NewCommentForm_loading__2X7AS\",\"control\":\"NewCommentForm_control__3n716\",\"actions\":\"NewCommentForm_actions__3NweL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__KE-VE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__32xCL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__1Q6wZ\"};","import { useEffect, useRef } from 'react';\nimport useHttp from '../Hooks/use-http';\nimport { addComment } from '../Lib/api';\nimport { useParams } from 'react-router-dom';\nimport classes from './NewCommentForm.module.css';\n\nconst NewCommentForm = props => {\n  const { sendRequest, data, status, error } = useHttp(addComment);\n  const commentTextRef = useRef();\n  const p = useParams();\n  const { onAddComment } = props;\n  useEffect(() => {\n    if (status === 'completed' && !error) {\n      onAddComment();\n    }\n  }, [data, status, onAddComment]);\n  const submitFormHandler = event => {\n    event.preventDefault();\n    sendRequest({\n      quoteId: p.quoteId,\n      commentData: commentTextRef.current.value,\n    });\n    commentTextRef.current.value = '';\n    // optional: Could validate here\n\n    // send comment to server\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = props => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map(comment => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useCallback, useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport useHttp from '../Hooks/use-http';\nimport { getAllComments } from '../Lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\nimport CommentList from '../comments/CommentsList';\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const { sendRequest, data, status, error } = useHttp(getAllComments, true);\n  const p = useParams();\n  // console.log(p);\n\n  useEffect(() => {\n    sendRequest(p.quoteId);\n  }, []);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const onAddComments = useCallback(() => {\n    sendRequest(p.quoteId);\n    return;\n  }, [p.quoteId, sendRequest]);\n  let comments;\n  if (status === 'pending')\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  if (status === 'completed' && !error) {\n    comments = <CommentList comments={[...data]} />;\n  }\n  if (status === 'completed' && !error && [...data].length == 0)\n    comments = <p className=\"centered\">No Comments Added at this post</p>;\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && <NewCommentForm onAddComment={onAddComments} />}\n      <p>{comments}</p>\n    </section>\n  );\n};\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import React, { useEffect } from 'react';\r\nimport {\r\n  Route,\r\n  useParams,\r\n  useLocation,\r\n  Link,\r\n  useRouteMatch,\r\n} from 'react-router-dom';\r\nimport Comments from '../components/comments/Comments';\r\nimport useHttp from '../components/Hooks/use-http';\r\nimport { getSingleQuote } from '../components/Lib/api';\r\nimport Highlighted from '../components/quotes/HighlightedQuote';\r\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\r\n\r\nconst QuoteDetails = props => {\r\n  const params = useParams();\r\n  const match = useRouteMatch();\r\n  const { sendRequest, status, data, error } = useHttp(getSingleQuote, true);\r\n  useEffect(() => {\r\n    sendRequest(params.quoteId);\r\n  }, [sendRequest]);\r\n\r\n  if (status === 'pending')\r\n    return (\r\n      <p className=\" centered\">\r\n        <LoadingSpinner />\r\n      </p>\r\n    );\r\n  if (error) return <p className=\"centered\">{error}</p>;\r\n  if (status === 'completed' && !error && data == undefined)\r\n    return <p>No quote found</p>;\r\n  return (\r\n    <div>\r\n      <Highlighted text={data.text} author={data.author} />\r\n\r\n      <Route path={`${match.path}`} exact>\r\n        <div className=\"centered\">\r\n          <Link to={`${match.url}/comments`} className=\"btn--flat\">\r\n            Load Comments\r\n          </Link>\r\n        </div>\r\n      </Route>\r\n      <Route path={`${match.path}/comments`}>\r\n        <Comments />\r\n      </Route>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuoteDetails;\r\n"],"sourceRoot":""}